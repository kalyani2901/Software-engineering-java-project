#BlueJ class context
comment0.params=
comment0.target=java.util.List\ getProducts()
comment0.text=\n\ <pre>\n\ This\ method\ returns\ the\ list\ of\ all\ products\ in\ the\ store.\n\ The\ products\ in\ this\ list\ are\ used\ to\ drive\ all\ other\ product\ related\ actions\ in\ the\ store\ so\ they\ only\ need\ to\ be\ defined\ here.\n\ \n\ The\ products\ may\ be\ loaded\ from\ a\ server,\ a\ web-site,\ or\ any\ other\ source,\ as\ long\ as\ they\ are\ returned\ from\ this\ method\ in\ a\ list.\n\ </pre>\n\ @return\ The\ list\ of\ products\ in\ the\ store.\n
comment1.params=username\ password
comment1.target=boolean\ login(java.lang.String,\ java.lang.String)
comment1.text=\n\ <pre>\n\ This\ method\ determines\ if\ a\ login\ was\ successful\ or\ not.\n\ \n\ The\ criteria\ for\ a\ successful\ login\ is\ usually\:\n\ -\ The\ user\ ID\ is\ valid\ and\ the\ user\ exists\n\ -\ The\ password\ is\ a\ valid\ password\n\ -\ The\ supplied\ password\ matches\ with\ the\ user's\ stored\ password\n\ \n\ (\ A\ system\ like\ this\ is\ very\ insecure\ and\ should\ NEVER\ be\ used\ in\ the\ real\ world,\ this\ is\ purely\ for\ learning\ purposes.\ )\n\ </pre>\n\ @param\ username\ The\ user\ ID\ of\ the\ user\ attempting\ to\ login\n\ @param\ password\ The\ supplied\ password\ to\ be\ tested\n\ @return\ This\ method\ returns\ true\ if\ the\ login\ was\ successful,\ or\ false\ if\ it\ was\ not\n
comment10.params=username
comment10.target=Customer\ getUserInfo(java.lang.String)
comment10.text=\n\ <pre>\n\ Get\ a\ user's\ information.\n\ </pre>\n\ @param\ username\ The\ id\ of\ the\ user.\n\ @return\ A\ Customer\ object\ with\ the\ user's\ information.\n
comment11.params=order
comment11.target=void\ setOrder(Order)
comment12.params=username\ info
comment12.target=boolean\ setUserInfo(java.lang.String,\ Customer)
comment12.text=\n\ <pre>\n\ Updates\ the\ users\ information\ in\ the\ back-end.\n\ \n\ This\ operation\ may\ fail\ due\ to\ server\ error\ or\ other\ network\ issues.\n\ If\ this\ happens\ return\ false,\ otherwise\ always\ return\ true.\n\ </pre>\n\ @param\ username\ The\ user\ ID\ of\ the\ user.\n\ @param\ info\ The\ information\ to\ set.\n\ @return\ Returns\ true\ if\ the\ operation\ succeeded,\ false\ otherwise.\n
comment13.params=title\ mov
comment13.target=boolean\ setMovieInfo(java.lang.String,\ Movie)
comment14.params=title\ mus
comment14.target=boolean\ setMusicInfo(java.lang.String,\ Music)
comment15.params=title\ game
comment15.target=boolean\ setGameInfo(java.lang.String,\ Game)
comment16.params=title\ tv
comment16.target=boolean\ setTvSeriesInfo(java.lang.String,\ TvSeries)
comment17.params=currentUserID\ cart
comment17.target=boolean\ processOrder(java.lang.String,\ Cart)
comment17.text=\n\ <pre>\n\ This\ method\ processes\ an\ user's\ order.\ \n\ \n\ A\ method\ like\ this\ would\ usually\ send\ a\ request\ to\ the\ back-end\ server\ and\ the\ transaction\ would\ be\ processed\ there.\n\ Once\ the\ transaction\ completes\ the\ result\ would\ be\ sent\ back\ to\ this\ method\ and\ it\ would\ return\ with\ either\ true\ or\ false\ depending\ on\ the\ data\ from\ the\ server.\n\ \n\ (\ A\ system\ like\ this\ is\ very\ insecure\ and\ should\ NEVER\ be\ used\ in\ the\ real\ world,\ this\ is\ purely\ for\ learning\ purposes.\ )\n\ </pre>\n\ @param\ currentUserID\ The\ user\ ID\ of\ the\ user.\n\ @param\ cart\ The\ cart\ full\ of\ items\ that\ the\ user\ wishes\ to\ buy.\n\ @return\ True\ if\ the\ order\ was\ successful,\ false\ otherwise.\n
comment2.params=username\ password
comment2.target=boolean\ signup(java.lang.String,\ java.lang.String)
comment2.text=\n\ <pre>\n\ This\ method\ takes\ a\ user\ ID\ and\ a\ password\ and\ attempts\ to\ create\ an\ account\ for\ the\ user.\n\ \n\ The\ account\ creation\ should\ be\ unsuccessful\ if\ any\ of\ the\ following\ are\ true\:\n\ -\ A\ user\ with\ the\ requested\ user\ ID\ already\ exists.\n\ -\ The\ user\ ID\ is\ too\ short.\n\ -\ The\ password\ is\ too\ short.\n\ -\ The\ password\ is\ too\ insecure\ (insufficient\ length,\ no\ special\ characters)\ OPTIONAL\n\ \n\ If\ the\ account\ creation\ is\ successful,\ the\ following\ should\ take\ place\:\n\ -\ The\ user's\ ID\ and\ password\ is\ stored.\n\ -\ A\ new\ Customer\ object\ is\ created\ and\ stored\ along\ with\ the\ user\ details.\n\ \n\ (\ A\ system\ like\ this\ is\ very\ insecure\ and\ should\ NEVER\ be\ used\ in\ the\ real\ world,\ this\ is\ purely\ for\ learning\ purposes.\ )\n\ </pre>\n\ @param\ username\ The\ user\ ID\ that\ the\ user\ would\ like\ to\ use\n\ @param\ password\ The\ password\ that\ the\ user\ would\ like\ to\ use\n\ @return\ This\ method\ returns\ true\ if\ the\ user\ account\ was\ successfully\ created,\ and\ false\ otherwise.\n
comment3.params=
comment3.target=void\ write()
comment4.params=
comment4.target=void\ writeOrder()
comment5.params=
comment5.target=void\ readOrder()
comment6.params=
comment6.target=void\ writeToMovie()
comment7.params=item\ date
comment7.target=java.util.List\ getSearchResult(java.lang.String,\ java.lang.String)
comment8.params=item
comment8.target=java.util.List\ getSearchResult(java.lang.String)
comment9.params=cart
comment9.target=float\ getPrice(Cart)
comment9.text=\n\ <pre>\n\ This\ method\ takes\ a\ Cart\ object\ and\ returns\ the\ total\ price\ of\ all\ items\ in\ that\ cart.\n\ \n\ Cart's\ are\ essentially\ just\ a\ list\ that\ looks\ like\ the\ following\:\n\ -\ CartItem\ (product,\ quantity)\n\ -\ CartItem\ (product,\ quantity)\n\ -\ CartItem\ (product,\ quantity)\n\ \n\ As\ product's\ contain\ no\ price\ data\ by\ default,\ the\ price\ of\ products\ can\ be\ calculated\ using\ product\ properties.\n\ EG\:\ A\ product\ may\ have\ a\ "unitPrice"\ property\ that\ is\ multiplied\ by\ the\ quantity\ for\ all\ of\ the\ CartItem's.\n\ </pre>\n\ @param\ cart\ The\ cart\ to\ calculate\ the\ price\ of\n\ @return\ The\ total\ price\ of\ all\ items\ in\ the\ cart.\n
numComments=18
